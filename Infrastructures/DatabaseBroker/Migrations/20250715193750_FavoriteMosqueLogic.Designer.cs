// <auto-generated />
using System;
using System.Collections.Generic;
using DatabaseBroker.DataContext;
using Entity.Models.QuranCourses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DatabaseBroker.Migrations
{
    [DbContext(typeof(IhdaDataContext))]
    [Migration("20250715193750_FavoriteMosqueLogic")]
    partial class FavoriteMosqueLogic
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entity.Models.Auth.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("permissions", "auth");
                });

            modelBuilder.Entity("Entity.Models.Auth.SignMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_sign_methods", "auth");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entity.Models.Auth.Structure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("structures", "auth");
                });

            modelBuilder.Entity("Entity.Models.Auth.StructurePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.Property<long>("StructureId")
                        .HasColumnType("bigint")
                        .HasColumnName("structure_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("StructureId");

                    b.ToTable("structure_permissions", "auth");
                });

            modelBuilder.Entity("Entity.Models.Auth.TokenModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessTokenId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access_token_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("ExpireRefreshToken")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expire_refresh_token");

                    b.Property<DateTime>("ExpireToken")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expire_token");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<int>("TokenType")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("tokens", "auth");
                });

            modelBuilder.Entity("Entity.Models.Auth.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth_date");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<string>("Pinfl")
                        .HasColumnType("text")
                        .HasColumnName("pinfl");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("users", "auth");
                });

            modelBuilder.Entity("Entity.Models.Auth.UserStructure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<long>("StructureId")
                        .HasColumnType("bigint")
                        .HasColumnName("structure_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("StructureId");

                    b.HasIndex("UserId");

                    b.ToTable("user_structures", "auth");
                });

            modelBuilder.Entity("Entity.Models.Mosques.FavoriteMosque", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<long>("MosqueId")
                        .HasColumnType("bigint")
                        .HasColumnName("mosque_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("MosqueId");

                    b.HasIndex("UserId");

                    b.ToTable("favorite_mosques", "prayerful");
                });

            modelBuilder.Entity("Entity.Models.Mosques.Mosque", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<List<string>>("PhotoUrls")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("photo_urls");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("mosques", "prayerful");
                });

            modelBuilder.Entity("Entity.Models.Mosques.MosqueAdmin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<long>("MosqueId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_form_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("MosqueId");

                    b.HasIndex("UserId");

                    b.ToTable("MosqueAdmin");
                });

            modelBuilder.Entity("Entity.Models.Mosques.MosquePrayerTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<TimeOnly>("AdhamAsr")
                        .HasColumnType("time without time zone")
                        .HasColumnName("adham_asr");

                    b.Property<TimeOnly>("AdhamDhuhr")
                        .HasColumnType("time without time zone")
                        .HasColumnName("adham_dhuhr");

                    b.Property<TimeOnly>("AdhamFajr")
                        .HasColumnType("time without time zone")
                        .HasColumnName("adham_fajr");

                    b.Property<TimeOnly>("AdhamIsha")
                        .HasColumnType("time without time zone")
                        .HasColumnName("adham_isha");

                    b.Property<TimeOnly>("AdhamMaghrib")
                        .HasColumnType("time without time zone")
                        .HasColumnName("adham_maghrib");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<TimeOnly>("IqamahAsr")
                        .HasColumnType("time without time zone")
                        .HasColumnName("iqamah_asr");

                    b.Property<TimeOnly>("IqamahDhuhr")
                        .HasColumnType("time without time zone")
                        .HasColumnName("iqamah_dhuhr");

                    b.Property<TimeOnly>("IqamahFajr")
                        .HasColumnType("time without time zone")
                        .HasColumnName("iqamah_fajr");

                    b.Property<TimeOnly>("IqamahIsha")
                        .HasColumnType("time without time zone")
                        .HasColumnName("iqamah_isha");

                    b.Property<TimeOnly>("IqamahMaghrib")
                        .HasColumnType("time without time zone")
                        .HasColumnName("iqamah_maghrib");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<long>("MosqueId")
                        .HasColumnType("bigint")
                        .HasColumnName("mosque_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("MosqueId");

                    b.ToTable("mosque_prayer_times", "prayerful");
                });

            modelBuilder.Entity("Entity.Models.QuranCourses.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseFormId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_form_id");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseFormId");

                    b.HasIndex("TeacherId");

                    b.ToTable("courses", "quran_courses");
                });

            modelBuilder.Entity("Entity.Models.QuranCourses.CourseForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AdmissionQuota")
                        .HasColumnType("integer")
                        .HasColumnName("admission_quota");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<int?>("ForGender")
                        .HasColumnType("integer")
                        .HasColumnName("for_gender");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<int?>("MaxYearsOld")
                        .HasColumnType("integer")
                        .HasColumnName("max_years_old");

                    b.Property<int?>("MinYearsOld")
                        .HasColumnType("integer")
                        .HasColumnName("min_years_old");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("TrainingCenterId")
                        .HasColumnType("bigint")
                        .HasColumnName("training_center_id");

                    b.Property<WorkingHour>("TransitionTime")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("working_hours");

                    b.HasKey("Id");

                    b.HasIndex("TrainingCenterId");

                    b.ToTable("course_forms", "quran_courses");
                });

            modelBuilder.Entity("Entity.Models.QuranCourses.CourseFormTeacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseFormId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_form_id");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseFormId");

                    b.HasIndex("UserId");

                    b.ToTable("course_form_teachers", "quran_courses");
                });

            modelBuilder.Entity("Entity.Models.QuranCourses.PetitionForQuranCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birthday");

                    b.Property<long>("CourseFormId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_form_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("passport");

                    b.Property<DateTime>("PassportExpireDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("passport_expire_date");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Pinfl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pinfl");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<long?>("userId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseFormId");

                    b.HasIndex("userId");

                    b.ToTable("petition_for_quran_course", "quran_courses");
                });

            modelBuilder.Entity("Entity.Models.QuranCourses.TrainingCenter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint")
                        .HasColumnName("district_id");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<string>("Landmark")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("landmark");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string[]>("PhotosLink")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("photos_link");

                    b.Property<WorkingHour>("WorkingHours")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("working_hours");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("training_centers", "quran_courses");
                });

            modelBuilder.Entity("Entity.Models.ReferenceBook.CalculatingCentury", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("calculating_centuries", "reference_book");
                });

            modelBuilder.Entity("Entity.Models.ReferenceBook.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("countries", "reference_book");
                });

            modelBuilder.Entity("Entity.Models.ReferenceBook.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint")
                        .HasColumnName("region_id");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("RegionId");

                    b.ToTable("districts", "reference_book");
                });

            modelBuilder.Entity("Entity.Models.ReferenceBook.PrayerTimeStyle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("prayer_time_styles", "reference_book");
                });

            modelBuilder.Entity("Entity.Models.ReferenceBook.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.ToTable("regions", "reference_book");
                });

            modelBuilder.Entity("Entity.Models.StaticFiles.StaticFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text")
                        .HasColumnName("file_extension");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<string>("OldName")
                        .HasColumnType("text")
                        .HasColumnName("old_name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("static_files", "asset");
                });

            modelBuilder.Entity("Entity.Models.Auth.DefaultSignMethod", b =>
                {
                    b.HasBaseType("Entity.Models.Auth.SignMethod");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.ToTable("user_sign_methods", "auth");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Entity.Models.Auth.SignMethod", b =>
                {
                    b.HasOne("Entity.Models.Auth.User", "User")
                        .WithMany("SignMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Models.Auth.StructurePermission", b =>
                {
                    b.HasOne("Entity.Models.Auth.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Auth.Structure", "Structure")
                        .WithMany("StructurePermissions")
                        .HasForeignKey("StructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Structure");
                });

            modelBuilder.Entity("Entity.Models.Auth.UserStructure", b =>
                {
                    b.HasOne("Entity.Models.Auth.Structure", "Structure")
                        .WithMany()
                        .HasForeignKey("StructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Auth.User", "User")
                        .WithMany("Structures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Structure");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Models.Mosques.FavoriteMosque", b =>
                {
                    b.HasOne("Entity.Models.Mosques.Mosque", "Mosque")
                        .WithMany()
                        .HasForeignKey("MosqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mosque");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Models.Mosques.MosqueAdmin", b =>
                {
                    b.HasOne("Entity.Models.Mosques.Mosque", "Mosque")
                        .WithMany("MosqueAdmins")
                        .HasForeignKey("MosqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mosque");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Models.Mosques.MosquePrayerTime", b =>
                {
                    b.HasOne("Entity.Models.Mosques.Mosque", "Mosque")
                        .WithMany()
                        .HasForeignKey("MosqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mosque");
                });

            modelBuilder.Entity("Entity.Models.QuranCourses.Course", b =>
                {
                    b.HasOne("Entity.Models.QuranCourses.CourseForm", "CourseForm")
                        .WithMany()
                        .HasForeignKey("CourseFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.QuranCourses.CourseFormTeacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseForm");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Entity.Models.QuranCourses.CourseForm", b =>
                {
                    b.HasOne("Entity.Models.QuranCourses.TrainingCenter", "TrainingCenter")
                        .WithMany()
                        .HasForeignKey("TrainingCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingCenter");
                });

            modelBuilder.Entity("Entity.Models.QuranCourses.CourseFormTeacher", b =>
                {
                    b.HasOne("Entity.Models.QuranCourses.CourseForm", "CourseForm")
                        .WithMany("Teachers")
                        .HasForeignKey("CourseFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseForm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Models.QuranCourses.PetitionForQuranCourse", b =>
                {
                    b.HasOne("Entity.Models.QuranCourses.CourseForm", "CourseForm")
                        .WithMany()
                        .HasForeignKey("CourseFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("CourseForm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Models.QuranCourses.TrainingCenter", b =>
                {
                    b.HasOne("Entity.Models.ReferenceBook.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Entity.Models.ReferenceBook.District", b =>
                {
                    b.HasOne("Entity.Models.ReferenceBook.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Entity.Models.ReferenceBook.Region", b =>
                {
                    b.HasOne("Entity.Models.ReferenceBook.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Entity.Models.Auth.Structure", b =>
                {
                    b.Navigation("StructurePermissions");
                });

            modelBuilder.Entity("Entity.Models.Auth.User", b =>
                {
                    b.Navigation("SignMethods");

                    b.Navigation("Structures");
                });

            modelBuilder.Entity("Entity.Models.Mosques.Mosque", b =>
                {
                    b.Navigation("MosqueAdmins");
                });

            modelBuilder.Entity("Entity.Models.QuranCourses.CourseForm", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Entity.Models.QuranCourses.CourseFormTeacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
